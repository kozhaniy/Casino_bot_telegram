from aiogram import Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from core.other.db_connect import Request
from core.keyboards.inline import refill_balance
import asyncio
import math


async def dice(message: Message, bot: Bot, state: FSMContext, request: Request):
    bid = message.text
    if not bid.isdigit():
        await message.answer(f'{bid} - –Ω–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
        return

    check_balance = await request.get_game(bot.id, message.from_user.id, bid)
    print(check_balance)
    if not check_balance:
        await message.answer(f'–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
                             reply_markup=refill_balance)
        return

    msg = await message.answer_dice(emoji='üé∞')
    await asyncio.sleep(2)
    point, text = get_result_text(msg.dice.value, int(bid))
    await request.refill_balance(message.from_user.id, bot.id, point)
    await message.answer(text)
    await state.clear()


def get_row(result_dice: int):
    slot_values = {
        1: ('–±–∞—Ä', '–±–∞—Ä', '–±–∞—Ä',),
        2: ('–≤–∏–Ω–æ–≥—Ä–∞–¥', '–±–∞—Ä', '–±–∞—Ä',),
        3: ('–ª–∏–º–æ–Ω', '–±–∞—Ä', '–±–∞—Ä',),
        4: ('—Å–µ–º—ë—Ä–∫–∞', '–±–∞—Ä', '–±–∞—Ä',),
        5: ('–±–∞—Ä', '–≤–∏–Ω–æ–≥—Ä–∞–¥', '–±–∞—Ä',),
        6: ('–≤–∏–Ω–æ–≥—Ä–∞–¥', '–≤–∏–Ω–æ–≥—Ä–∞–¥', '–±–∞—Ä',),
        7: ('–ª–∏–º–æ–Ω', '–≤–∏–Ω–æ–≥—Ä–∞–¥', '–±–∞—Ä',),
        8: ('—Å–µ–º—ë—Ä–∫–∞', '–≤–∏–Ω–æ–≥—Ä–∞–¥', '–±–∞—Ä',),
        9: ('–±–∞—Ä', '–ª–∏–º–æ–Ω', '–±–∞—Ä',),
        10: ('–≤–∏–Ω–æ–≥—Ä–∞–¥', '–ª–∏–º–æ–Ω', '–±–∞—Ä',),
        11: ('–ª–∏–º–æ–Ω', '–ª–∏–º–æ–Ω', '–±–∞—Ä',),
        12: ('—Å–µ–º—ë—Ä–∫–∞', '–ª–∏–º–æ–Ω', '–±–∞—Ä',),
        13: ('–±–∞—Ä', '—Å–µ–º—ë—Ä–∫–∞', '–±–∞—Ä',),
        14: ('–≤–∏–Ω–æ–≥—Ä–∞–¥', '—Å–µ–º—ë—Ä–∫–∞', '–±–∞—Ä',),
        15: ('–ª–∏–º–æ–Ω', '—Å–µ–º—ë—Ä–∫–∞', '–±–∞—Ä',),
        16: ('—Å–µ–º—ë—Ä–∫–∞', '—Å–µ–º—ë—Ä–∫–∞', '–±–∞—Ä',),
        17: ('–±–∞—Ä', '–±–∞—Ä', '–≤–∏–Ω–æ–≥—Ä–∞–¥',),
        18: ('–≤–∏–Ω–æ–≥—Ä–∞–¥', '–±–∞—Ä', '–≤–∏–Ω–æ–≥—Ä–∞–¥',),
        19: ('–ª–∏–º–æ–Ω', '–±–∞—Ä', '–≤–∏–Ω–æ–≥—Ä–∞–¥',),
        20: ('—Å–µ–º—ë—Ä–∫–∞', '–±–∞—Ä', '–≤–∏–Ω–æ–≥—Ä–∞–¥',),
        21: ('–±–∞—Ä', '–≤–∏–Ω–æ–≥—Ä–∞–¥', '–≤–∏–Ω–æ–≥—Ä–∞–¥',),
        22: ('–≤–∏–Ω–æ–≥—Ä–∞–¥', '–≤–∏–Ω–æ–≥—Ä–∞–¥', '–≤–∏–Ω–æ–≥—Ä–∞–¥',),
        23: ('–ª–∏–º–æ–Ω', '–≤–∏–Ω–æ–≥—Ä–∞–¥', '–≤–∏–Ω–æ–≥—Ä–∞–¥',),
        24: ('—Å–µ–º—ë—Ä–∫–∞', '–≤–∏–Ω–æ–≥—Ä–∞–¥', '–≤–∏–Ω–æ–≥—Ä–∞–¥',),
        25: ('–±–∞—Ä', '–ª–∏–º–æ–Ω', '–≤–∏–Ω–æ–≥—Ä–∞–¥',),
        26: ('–≤–∏–Ω–æ–≥—Ä–∞–¥', '–ª–∏–º–æ–Ω', '–≤–∏–Ω–æ–≥—Ä–∞–¥',),
        27: ('–ª–∏–º–æ–Ω', '–ª–∏–º–æ–Ω', '–≤–∏–Ω–æ–≥—Ä–∞–¥',),
        28: ('—Å–µ–º—ë—Ä–∫–∞', '–ª–∏–º–æ–Ω', '–≤–∏–Ω–æ–≥—Ä–∞–¥',),
        29: ('–±–∞—Ä', '—Å–µ–º—ë—Ä–∫–∞', '–≤–∏–Ω–æ–≥—Ä–∞–¥',),
        30: ('–≤–∏–Ω–æ–≥—Ä–∞–¥', '—Å–µ–º—ë—Ä–∫–∞', '–≤–∏–Ω–æ–≥—Ä–∞–¥',),
        31: ('–ª–∏–º–æ–Ω', '—Å–µ–º—ë—Ä–∫–∞', '–≤–∏–Ω–æ–≥—Ä–∞–¥',),
        32: ('—Å–µ–º—ë—Ä–∫–∞', '—Å–µ–º—ë—Ä–∫–∞', '–≤–∏–Ω–æ–≥—Ä–∞–¥',),
        33: ('–±–∞—Ä', '–±–∞—Ä', '–ª–∏–º–æ–Ω',),
        34: ('–≤–∏–Ω–æ–≥—Ä–∞–¥', '–±–∞—Ä', '–ª–∏–º–æ–Ω',),
        35: ('–ª–∏–º–æ–Ω', '–±–∞—Ä', '–ª–∏–º–æ–Ω',),
        36: ('—Å–µ–º—ë—Ä–∫–∞', '–±–∞—Ä', '–ª–∏–º–æ–Ω',),
        37: ('–±–∞—Ä', '–≤–∏–Ω–æ–≥—Ä–∞–¥', '–ª–∏–º–æ–Ω',),
        38: ('–≤–∏–Ω–æ–≥—Ä–∞–¥', '–≤–∏–Ω–æ–≥—Ä–∞–¥', '–ª–∏–º–æ–Ω',),
        39: ('–ª–∏–º–æ–Ω', '–≤–∏–Ω–æ–≥—Ä–∞–¥', '–ª–∏–º–æ–Ω',),
        40: ('—Å–µ–º—ë—Ä–∫–∞', '–≤–∏–Ω–æ–≥—Ä–∞–¥', '–ª–∏–º–æ–Ω',),
        41: ('–±–∞—Ä', '–ª–∏–º–æ–Ω', '–ª–∏–º–æ–Ω',),
        42: ('–≤–∏–Ω–æ–≥—Ä–∞–¥', '–ª–∏–º–æ–Ω', '–ª–∏–º–æ–Ω',),
        43: ('–ª–∏–º–æ–Ω', '–ª–∏–º–æ–Ω', '–ª–∏–º–æ–Ω',),
        44: ('—Å–µ–º—ë—Ä–∫–∞', '–ª–∏–º–æ–Ω', '–ª–∏–º–æ–Ω',),
        45: ('–±–∞—Ä', '—Å–µ–º—ë—Ä–∫–∞', '–ª–∏–º–æ–Ω',),
        46: ('–≤–∏–Ω–æ–≥—Ä–∞–¥', '—Å–µ–º—ë—Ä–∫–∞', '–ª–∏–º–æ–Ω',),
        47: ('–ª–∏–º–æ–Ω', '—Å–µ–º—ë—Ä–∫–∞', '–ª–∏–º–æ–Ω',),
        48: ('—Å–µ–º—ë—Ä–∫–∞', '—Å–µ–º—ë—Ä–∫–∞', '–ª–∏–º–æ–Ω',),
        49: ('–±–∞—Ä', '–±–∞—Ä', '—Å–µ–º—ë—Ä–∫–∞',),
        50: ('–≤–∏–Ω–æ–≥—Ä–∞–¥', '–±–∞—Ä', '—Å–µ–º—ë—Ä–∫–∞',),
        51: ('–ª–∏–º–æ–Ω', '–±–∞—Ä', '—Å–µ–º—ë—Ä–∫–∞',),
        52: ('—Å–µ–º—ë—Ä–∫–∞', '–±–∞—Ä', '—Å–µ–º—ë—Ä–∫–∞',),
        53: ('–±–∞—Ä', '–≤–∏–Ω–æ–≥—Ä–∞–¥', '—Å–µ–º—ë—Ä–∫–∞',),
        54: ('–≤–∏–Ω–æ–≥—Ä–∞–¥', '–≤–∏–Ω–æ–≥—Ä–∞–¥', '—Å–µ–º—ë—Ä–∫–∞',),
        55: ('–ª–∏–º–æ–Ω', '–≤–∏–Ω–æ–≥—Ä–∞–¥', '—Å–µ–º—ë—Ä–∫–∞',),
        56: ('—Å–µ–º—ë—Ä–∫–∞', '–≤–∏–Ω–æ–≥—Ä–∞–¥', '—Å–µ–º—ë—Ä–∫–∞',),
        57: ('–±–∞—Ä', '–ª–∏–º–æ–Ω', '—Å–µ–º—ë—Ä–∫–∞',),
        58: ('–≤–∏–Ω–æ–≥—Ä–∞–¥', '–ª–∏–º–æ–Ω', '—Å–µ–º—ë—Ä–∫–∞',),
        59: ('–ª–∏–º–æ–Ω', '–ª–∏–º–æ–Ω', '—Å–µ–º—ë—Ä–∫–∞',),
        60: ('—Å–µ–º—ë—Ä–∫–∞', '–ª–∏–º–æ–Ω', '—Å–µ–º—ë—Ä–∫–∞',),
        61: ('–±–∞—Ä', '—Å–µ–º—ë—Ä–∫–∞', '—Å–µ–º—ë—Ä–∫–∞',),
        62: ('–≤–∏–Ω–æ–≥—Ä–∞–¥', '—Å–µ–º—ë—Ä–∫–∞', '—Å–µ–º—ë—Ä–∫–∞',),
        63: ('–ª–∏–º–æ–Ω', '—Å–µ–º—ë—Ä–∫–∞', '—Å–µ–º—ë—Ä–∫–∞',),
        64: ('—Å–µ–º—ë—Ä–∫–∞', '—Å–µ–º—ë—Ä–∫–∞', '—Å–µ–º—ë—Ä–∫–∞',),
    }
    return '| '.join(slot_values.get(result_dice))


def get_point(result_dice: int):
    if result_dice in (1, 22, 43):
        return 1.5
    if result_dice in (6, 11, 16, 17, 27, 32, 33, 38, 48, 49, 54, 59):
        return 1.2
    elif result_dice == 64:
        return 2
    else:
        return -1


def get_result_text(result_dice: int, bid):
    result = get_point(result_dice)
    point = math.ceil(bid * result)

    comb = get_row(result_dice)
    if result > 0:
        text_for_gamer = f"–í–∞—à–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è:\r\n{comb}\r\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {point} –æ—á–∫–æ–≤."
    else:
        text_for_gamer = f"–í–∞—à–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è:\r\n{comb}\r\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑–æ–∫."

    return point, text_for_gamer












